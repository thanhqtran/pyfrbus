# This uses the path as is, and avoids running the interpreter.
incdir_numpy = run_command(py,['-c',
'''import os
import numpy as np
try:
  incdir = os.path.relpath(np.get_include())
except Exception:
  incdir = np.get_include()
print(incdir)
'''], check: true).stdout().strip()

# SWIG needs to find umfpack.h, so add all potential candidates
swig_inc_args = []
foreach _dir : suitesparse_incdirs
    swig_inc_args += '-I' + _dir
endforeach

# This is a hack that gets at the location for conda envs (and perhaps other
# types of envs), when building with conda compilers. We need proper SWIG
# support for this to become more robust, see
# https://github.com/mesonbuild/meson/issues/341.
if cc.get_id() == 'gcc'
    _cc_sysroot = run_command([cc, '-print-sysroot'], check: true).stdout().strip()
    if _cc_sysroot.contains('bin/../')
       _incdir = _cc_sysroot.split('bin/../')[0] / 'include'
       if fs.exists(_incdir)
           swig_inc_args += '-I' + _incdir
       endif
       if fs.exists(_incdir / 'suitesparse')
           swig_inc_args += '-I' + (_incdir / 'suitesparse')
       endif
    endif
elif cc.get_id() == 'clang'
    _clang_v = run_command([cc, '-v'], check: true).stderr().strip()
    if _clang_v.contains('InstalledDir: ')
        _bindir = _clang_v.split('InstalledDir: ')[1]
        if fs.exists(_bindir)
            _incdir = _bindir / '../include'
            if fs.exists(_incdir)
                swig_inc_args += '-I' + _incdir
            endif
            if fs.exists(_incdir / 'suitesparse')
                swig_inc_args += '-I' + (_incdir / 'suitesparse')
            endif
        endif
    endif
endif
# The above took care of all fixed directories. We also need the default
# compiler search directories, but Meson doesn't expose those.
_umfpack_swig = custom_target('_umfpack_swig',
    output: [
        '_umfpack_wrap.c',
        '_umfpack.py',
    ],
    input: 'umfpack.i',
    command: [swig, '-python'] + swig_defines + swig_inc_args + [
              '-o', '@OUTPUT0@', '-outdir', '@OUTDIR@', '@INPUT@'],
    install: true,
    install_dir: py.get_install_dir() / 'scikits/umfpack',  # need to install _umfpack.py
    install_tag: 'python-runtime',
  )

# Flags to silence warnings from code generated by SWIG
_c_args = cc.get_supported_arguments(
  '-Wno-misleading-indentation',
  '-Wno-incompatible-pointer-types',
)

__umfpack = py.extension_module('__umfpack',
    _umfpack_swig[0],  # _umfpack_wrap.c
    include_directories: [incdir_numpy],
    dependencies: [blas_deps, umfpack_dep],
    c_args: _c_args,
    install: true,
    subdir: 'scikits/umfpack'
)

py.install_sources(
    [
        '__init__.py',
        'interface.py',
        'umfpack.py',
    ],
    subdir: 'scikits/umfpack'
)

py.install_sources(
    [
        'tests/__init__.py',
        'tests/test_interface.py',
        'tests/test_umfpack.py',
    ],
    subdir: 'scikits/umfpack/tests'
)
